# -*- coding: utf-8 -*-
"""HRPlanes_HND.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TBVqVZxy7cE-Bxv6aK6-dkmUs7rzcboZ

<h1 align=center><b>Tokyo Haneda International Airport (HND)</b></font></h1>

<br>

<p align="center">
    <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/2f/Tokyo-International-Airport_Satellite.jpg/1024px-Tokyo-International-Airport_Satellite.jpg" height=500 width=1000 alt="Tokyo Haneda International Airport">
</p>

<small>Picture Source: <a href="https://en.wikipedia.org/wiki/Haneda_Airport">Wikipedia</a></small>

<br>

## **Statistical Overview of Tokyo Haneda International Airport**

Tokyo Haneda International Airport (HND) is one of the busiest airports in Asia and plays a crucial role in Japan's air transportation network. Its proximity to central Tokyo enhances its significance for both domestic and international travel.

<br>

Key Statistics:

- **Total Passengers:** Approximately 88 million annually, making it one of the leading airports in the world by passenger volume.
- **IATA/ICAO Codes:** HND/RJTT
- **Location:** ÅŒta, Tokyo, Japan
- **Rank Among Global Airports:** Haneda is frequently ranked among the top airports globally, often competing with major hubs such as Hartsfield-Jackson Atlanta and Beijing Capital for passenger traffic.
- **Growth Trends:** Haneda has seen significant growth, particularly in international travel, with an average annual increase of about 8.4%, reflecting its capacity to adapt to rising demand.

Make sure your runtime is **GPU** (_not_ CPU or TPU). And if it is an option, make sure you are using _Python 3_. You can select these settings by going to `Runtime -> Change runtime type -> Select the above mentioned settings and then press SAVE`.

## **0. Initial Steps**

### **0.1. Import and Download Libraries**
"""

# from google.colab import drive
# drive.mount('/gdrive')

!pip install rasterio -q

import os
import rasterio
from rasterio.windows import Window

"""## **1. Pre-process Image**"""

class ImageCropper:
    @classmethod
    def crop_and_save_multiple_images(cls, image_path, output_dir, level):
        img_width, img_height = 8000, 8000

        level_dir = os.path.join(output_dir, f"Level{level}")
        os.makedirs(level_dir, exist_ok=True)

        if level == 2:
            x_length, y_length = img_width // 2, img_height // 2
            row_min, row_max, col_min, col_max = 0, img_height, 0, img_width
        elif level == 3:
            x_length, y_length = img_width // 4, img_height // 4
            row_min, row_max, col_min, col_max = 0, img_height, 0, img_width
        else:
            raise ValueError("Level must be either 2 or 3.")

        image_id = 1
        with rasterio.open(image_path) as src:
            for r in range(row_min, row_max, y_length):
                for c in range(col_min, col_max, x_length):
                    window = Window(c, r, x_length, y_length)
                    transform = src.window_transform(window)
                    profile = src.profile.copy()
                    profile.update({
                        "height": window.height,
                        "width": window.width,
                        "transform": transform
                    })
                    cropped_img = src.read(window=window)
                    output_path = os.path.join(level_dir, f"image_patch_{image_id}.tif")
                    with rasterio.open(output_path, "w", **profile) as dst:
                        dst.write(cropped_img)
                    print(f'image_patch_{image_id} cropped and saved as {output_path}!')
                    image_id += 1

ImageCropper.crop_and_save_multiple_images('/content/HND.tif', '/content/', level=2)

ImageCropper.crop_and_save_multiple_images('/content/HND.tif', '/content/', level=3)

!zip -r /content/Level2.zip /content/Level2
!zip -r /content/Level3.zip /content/Level3

# from google.colab import files
# files.download("/content/Level2.zip")
# files.download("/content/Level3.zip")